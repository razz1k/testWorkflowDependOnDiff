name: Build and Deploy

on:
  push:
    branches: [ main, staging, new-CI ]
permissions:
  contents: write
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      scriptsToUpload: ${{ steps.scriptsArray.outputs.array }}
      isUploadNeeded: ${{ steps.diffChecker.outputs.pass || false }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: yarn install --production=false

      - name: prepare list of includes
        run: |
          for filename in ./src/*.js; do
            INPUT_FILE="$filename" node ./getDependency.cjs
          done
          sed -i 's/,/\n/g' ./src/*.js_tmp

      - name: prepare list for deploy
        id: diffChecker
        run: |
          for filename in ./src/*.js_tmp; do
            need_to_deploy="false"

            while read line; do
              git diff --exit-code --quiet HEAD~1 HEAD -- "$line" || need_to_deploy="true" 
            done < "$filename"
          
            [[ "$need_to_deploy" == "true" ]] && echo "${filename:6:-7}" >> o.txt # ./src/entry-1.js_tmp -> entry-1
          done
          [ ! -s o.txt ] && echo "no changes found" || echo "pass=true" >> "$GITHUB_OUTPUT"

      - name: prepare data for matrix
        if: ${{ steps.diffChecker.outputs.pass || false }}
        id: scriptsArray
        run: |
          while read scriptName; do echo -n "\"$scriptName\", " >> l.txt; done < o.txt
          echo "array=[$(cat l.txt | rev | cut -c3- | rev)]" >> "$GITHUB_OUTPUT"

  upload-and-clear-cache:
    if: ${{ contains(toJson(needs.build.outputs.isUploadNeeded), 'true') }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scriptName: ${{ fromJson(needs.build.outputs.scriptsToUpload) }}
    env:
      BUCKET_NAME: ${{ github.ref == 'refs/heads/main' && 'bucket-prod' || 'bucket-staging' }}
      NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    name: processing ${{ matrix.scriptName || 'skipped' }}
    steps:
      - name: prepare variables
        id: dynamicVariables
        run: |
          echo "EXAMPLE_URL_WITH_SUFFIX=EXAMPLE_URL_${{ matrix.scriptName }}" | tr '-' '_' | tr '[:lower:]' '[:upper:]' >> "$GITHUB_OUTPUT"
          echo "EXAMPLE_URL_FROM_VARS=EXAMPLE_URL_${{ matrix.scriptName }}_${{ github.ref_name }}" | tr '-' '_' | tr '[:lower:]' '[:upper:]' >> "$GITHUB_OUTPUT"
          echo "FASTLY_SERVICE_ID_WITH_SUFFIX=FASTLY_SERVICE_ID_${{ matrix.scriptName }}_${{ github.ref_name }}" | tr '-' '_' | tr '[:lower:]' '[:upper:]' >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: yarn install --production=false

      - name: build module
        run: |
          INPUT_FILE="./src/${{ matrix.scriptName }}.js" yarn build

      - name: check variables # this step just for test
        run: |
          echo "${{ matrix.scriptName }}"
          echo '${{ steps.dynamicVariables.outputs.EXAMPLE_URL_WITH_SUFFIX }}'
          echo '${{ steps.dynamicVariables.outputs.FASTLY_SERVICE_ID_WITH_SUFFIX }}'
          echo '${{ env[format('{0}', steps.dynamicVariables.outputs.EXAMPLE_URL_WITH_SUFFIX)] }}'
          echo '${{ steps.dynamicVariables.outputs.EXAMPLE_URL_FROM_VARS }}'
          echo '${{ vars[format('{0}', steps.dynamicVariables.outputs.EXAMPLE_URL_FROM_VARS)] }}'
          ls -la

      - name: skip step if variable doesn't exist # this step just for test
        if: ${{ vars[format('{0}', steps.dynamicVariables.outputs.EXAMPLE_URL_FROM_VARS)] || false }}
        run: |
          echo "hi"
